package org.suggs.fsm.bo;

import java.util.Objects;

/**
 * Bean type class to encapsulate all values that make up the identifiable characteristics of a business
 * object - not to be used as a composite id within O/R mappers.
 */
public class BusinessObjectIdentifier {

    private static final int NUM_BUCKETS = 1000;

    private String internalType;
    private String type;
    private String id;
    private String externalId;
    private String owner;
    private int version = 0;
    // -2 value means it's has not been computed
    private int hash = -2;

    /**
     * Constructs a new instance using all specified values (the hash will be computed).
     */
    public BusinessObjectIdentifier(String internalType, String type, String id, String owner, int version) {
        this(internalType, type, id, owner, version, null);
    }

    /**
     * Constructs a new instance using all specified values (the hash will be computed).
     */
    public BusinessObjectIdentifier(String internalType, String type, String id, String owner, int version, String externalId) {
        super();
        setInternalType(internalType);
        setType(type);
        setId(id);
        setOwner(owner);
        setVersion(version);
        setExternalId(externalId);
    }

    /**
     * Copy constructor
     */
    public BusinessObjectIdentifier(BusinessObjectIdentifier boId) {
        super();
        setType(boId.getType());
        setId(boId.getId());
        setExternalId(boId.getExternalId());
        setOwner(boId.getOwner());
        setVersion(boId.getVersion());
    }

    /**
     * Returns the bucket number an event was delivered to or bound for - must be positive between 0 and MAX_BUCKET_NUMBER inclusive.
     * <p>
     * If the id is set, will be computed based on it. If the id is not set, will be computed based on the external id.
     *
     * @return The bucket number an event was delivered to.
     */
    public int getHash() {
        if (hash != -2) {
            return hash;
        }
        if (id != null) {
            hash = linguaHashFromId(id);
        } else if (externalId != null) {
            hash = linguaHashFromId(externalId);
        } else {
            hash = -1;
        }

        return hash;
    }

    /**
     * Returns the business object id an event specifically relates to -
     * may be <code>null</code> if the business object has not been
     * created yet. Note, that this is the scribe internal business
     * object id, which is usually auto generated by scribe. It also
     * differs from Lingua business object id.
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the id field to the specified value.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Returns the external business object id. For example, the
     * Lingua business object id. May me <code>null</code> if it is
     * an internal business object.
     */
    public String getExternalId() {
        return externalId;
    }

    /**
     * Sets the id field to the specified value.
     */
    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    /**
     * Returns the system owner of the business object an event
     * specifically relates to - may not be null.
     *
     * @return The system owner of the business object an event
     * specifically relates to - may not be null.
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the owner field to the specified value.
     */
    public void setOwner(String owner) {
        this.owner = owner;
    }

    /**
     * Returns the business object type an event specifically relates
     * to - may never be null and must always have a value.
     *
     * @return The business object type an event specifically relates
     * to - may never be null and must always have a value.
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type field to the specified value.
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Returns the value of internalType.
     */
    public String getInternalType() {
        return internalType;
    }

    /**
     * Sets the internalType field to the specified value.
     */
    public void setInternalType(String internalType) {
        assert internalType != null;
        this.internalType = internalType;
    }

    /**
     * Returns the business object version an event specifically
     * relates to - may be -ve if the business object has not been
     * created yet.
     *
     * @return The business object version an event specifically
     * relates to - may be -ve if the business object has not
     * been created yet.
     */
    public int getVersion() {
        return version;
    }

    /**
     * Sets the version field to the specified value.
     */
    public void setVersion(int version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BusinessObjectIdentifier that = (BusinessObjectIdentifier) o;
        return version == that.version &&
                hash == that.hash &&
                Objects.equals(internalType, that.internalType) &&
                Objects.equals(type, that.type) &&
                Objects.equals(id, that.id) &&
                Objects.equals(externalId, that.externalId) &&
                Objects.equals(owner, that.owner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(internalType, type, id, externalId, owner, version, hash);
    }

    @Override
    public String toString() {
        return "BusinessObjectIdentifier{" +
                "internalType='" + internalType + '\'' +
                ", type='" + type + '\'' +
                ", id='" + id + '\'' +
                ", externalId='" + externalId + '\'' +
                ", owner='" + owner + '\'' +
                ", version=" + version +
                ", hash=" + hash +
                '}';
    }

    /**
     * Generate a standard Lingua "bucket ID" hash value from a business object ID
     */
    int linguaHashFromId(String id) {
        assert id != null;

        int sum = 0;
        for (int i = 0; i < id.length(); i++) {
            sum += id.charAt(i);
        }

        return sum % NUM_BUCKETS;
    }
}
